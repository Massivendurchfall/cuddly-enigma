local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "INK_GAME_GUI"
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 250, 0, 440)
mainFrame.Position = UDim2.new(0, 50, 0, 50)
mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = screenGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = mainFrame

local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 35)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = titleBar

local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "TitleLabel"
titleLabel.Size = UDim2.new(1, -40, 1, 0)
titleLabel.Position = UDim2.new(0, 10, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "INK GAME"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextScaled = true
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.Parent = titleBar

local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 25, 0, 25)
closeButton.Position = UDim2.new(1, -30, 0, 5)
closeButton.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
closeButton.BorderSizePixel = 0
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextScaled = true
closeButton.Font = Enum.Font.GothamBold
closeButton.Parent = titleBar

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 4)
closeCorner.Parent = closeButton

local contentFrame = Instance.new("Frame")
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, -20, 1, -55)
contentFrame.Position = UDim2.new(0, 10, 0, 45)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = mainFrame

local redLightFrame = Instance.new("Frame")
redLightFrame.Name = "RedLightFrame"
redLightFrame.Size = UDim2.new(1, 0, 0, 30)
redLightFrame.Position = UDim2.new(0, 0, 0, 0)
redLightFrame.BackgroundTransparency = 1
redLightFrame.Parent = contentFrame

local redLightLabel = Instance.new("TextLabel")
redLightLabel.Name = "RedLightLabel"
redLightLabel.Size = UDim2.new(1, -50, 1, 0)
redLightLabel.Position = UDim2.new(0, 0, 0, 0)
redLightLabel.BackgroundTransparency = 1
redLightLabel.Text = "RedLight GreenLight"
redLightLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
redLightLabel.TextScaled = true
redLightLabel.Font = Enum.Font.Gotham
redLightLabel.TextXAlignment = Enum.TextXAlignment.Left
redLightLabel.Parent = redLightFrame

local redLightButton = Instance.new("TextButton")
redLightButton.Name = "RedLightButton"
redLightButton.Size = UDim2.new(0, 40, 0, 20)
redLightButton.Position = UDim2.new(1, -40, 0, 5)
redLightButton.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
redLightButton.BorderSizePixel = 0
redLightButton.Text = ""
redLightButton.Parent = redLightFrame

local redLightButtonCorner = Instance.new("UICorner")
redLightButtonCorner.CornerRadius = UDim.new(0, 10)
redLightButtonCorner.Parent = redLightButton

local teleportFrame = Instance.new("Frame")
teleportFrame.Name = "TeleportFrame"
teleportFrame.Size = UDim2.new(1, 0, 0, 30)
teleportFrame.Position = UDim2.new(0, 0, 0, 40)
teleportFrame.BackgroundTransparency = 1
teleportFrame.Parent = contentFrame

local teleportLabel = Instance.new("TextLabel")
teleportLabel.Name = "TeleportLabel"
teleportLabel.Size = UDim2.new(1, -50, 1, 0)
teleportLabel.Position = UDim2.new(0, 0, 0, 0)
teleportLabel.BackgroundTransparency = 1
teleportLabel.Text = "Finish Glass Game"
teleportLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
teleportLabel.TextScaled = true
teleportLabel.Font = Enum.Font.Gotham
teleportLabel.TextXAlignment = Enum.TextXAlignment.Left
teleportLabel.Parent = teleportFrame

local teleportButton = Instance.new("TextButton")
teleportButton.Name = "TeleportButton"
teleportButton.Size = UDim2.new(0, 40, 0, 20)
teleportButton.Position = UDim2.new(1, -40, 0, 5)
teleportButton.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
teleportButton.BorderSizePixel = 0
teleportButton.Text = ""
teleportButton.Parent = teleportFrame

local teleportButtonCorner = Instance.new("UICorner")
teleportButtonCorner.CornerRadius = UDim.new(0, 10)
teleportButtonCorner.Parent = teleportButton

local infJumpFrame = Instance.new("Frame")
infJumpFrame.Name = "InfJumpFrame"
infJumpFrame.Size = UDim2.new(1, 0, 0, 30)
infJumpFrame.Position = UDim2.new(0, 0, 0, 80)
infJumpFrame.BackgroundTransparency = 1
infJumpFrame.Parent = contentFrame

local infJumpLabel = Instance.new("TextLabel")
infJumpLabel.Name = "InfJumpLabel"
infJumpLabel.Size = UDim2.new(1, -50, 1, 0)
infJumpLabel.Position = UDim2.new(0, 0, 0, 0)
infJumpLabel.BackgroundTransparency = 1
infJumpLabel.Text = "Inf Jump"
infJumpLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
infJumpLabel.TextScaled = true
infJumpLabel.Font = Enum.Font.Gotham
infJumpLabel.TextXAlignment = Enum.TextXAlignment.Left
infJumpLabel.Parent = infJumpFrame

local infJumpToggle = Instance.new("TextButton")
infJumpToggle.Name = "InfJumpToggle"
infJumpToggle.Size = UDim2.new(0, 40, 0, 20)
infJumpToggle.Position = UDim2.new(1, -40, 0, 5)
infJumpToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
infJumpToggle.BorderSizePixel = 0
infJumpToggle.Text = ""
infJumpToggle.Parent = infJumpFrame

local infJumpToggleCorner = Instance.new("UICorner")
infJumpToggleCorner.CornerRadius = UDim.new(0, 10)
infJumpToggleCorner.Parent = infJumpToggle

local walkSpeedFrame = Instance.new("Frame")
walkSpeedFrame.Name = "WalkSpeedFrame"
walkSpeedFrame.Size = UDim2.new(1, 0, 0, 50)
walkSpeedFrame.Position = UDim2.new(0, 0, 0, 120)
walkSpeedFrame.BackgroundTransparency = 1
walkSpeedFrame.Parent = contentFrame

local walkSpeedLabel = Instance.new("TextLabel")
walkSpeedLabel.Name = "WalkSpeedLabel"
walkSpeedLabel.Size = UDim2.new(1, 0, 0, 20)
walkSpeedLabel.Position = UDim2.new(0, 0, 0, 0)
walkSpeedLabel.BackgroundTransparency = 1
walkSpeedLabel.Text = "Walk Speed"
walkSpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
walkSpeedLabel.TextScaled = true
walkSpeedLabel.Font = Enum.Font.Gotham
walkSpeedLabel.TextXAlignment = Enum.TextXAlignment.Left
walkSpeedLabel.Parent = walkSpeedFrame

local walkSpeedSlider = Instance.new("Frame")
walkSpeedSlider.Name = "WalkSpeedSlider"
walkSpeedSlider.Size = UDim2.new(1, -50, 0, 20)
walkSpeedSlider.Position = UDim2.new(0, 0, 0, 25)
walkSpeedSlider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
walkSpeedSlider.BorderSizePixel = 0
walkSpeedSlider.Parent = walkSpeedFrame

local walkSpeedSliderCorner = Instance.new("UICorner")
walkSpeedSliderCorner.CornerRadius = UDim.new(0, 10)
walkSpeedSliderCorner.Parent = walkSpeedSlider

local walkSpeedKnob = Instance.new("TextButton")
walkSpeedKnob.Name = "WalkSpeedKnob"
walkSpeedKnob.Size = UDim2.new(0, 20, 0, 20)
walkSpeedKnob.Position = UDim2.new(0.5, -10, 0, 0)
walkSpeedKnob.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
walkSpeedKnob.BorderSizePixel = 0
walkSpeedKnob.Text = ""
walkSpeedKnob.Parent = walkSpeedSlider

local walkSpeedKnobCorner = Instance.new("UICorner")
walkSpeedKnobCorner.CornerRadius = UDim.new(0, 10)
walkSpeedKnobCorner.Parent = walkSpeedKnob

local walkSpeedValue = Instance.new("TextLabel")
walkSpeedValue.Name = "WalkSpeedValue"
walkSpeedValue.Size = UDim2.new(0, 40, 0, 20)
walkSpeedValue.Position = UDim2.new(1, -40, 0, 25)
walkSpeedValue.BackgroundTransparency = 1
walkSpeedValue.Text = "27"
walkSpeedValue.TextColor3 = Color3.fromRGB(255, 255, 255)
walkSpeedValue.TextScaled = true
walkSpeedValue.Font = Enum.Font.Gotham
walkSpeedValue.TextXAlignment = Enum.TextXAlignment.Center
walkSpeedValue.Parent = walkSpeedFrame

local noclipFrame = Instance.new("Frame")
noclipFrame.Name = "NoclipFrame"
noclipFrame.Size = UDim2.new(1, 0, 0, 30)
noclipFrame.Position = UDim2.new(0, 0, 0, 180)
noclipFrame.BackgroundTransparency = 1
noclipFrame.Parent = contentFrame

local noclipLabel = Instance.new("TextLabel")
noclipLabel.Name = "NoclipLabel"
noclipLabel.Size = UDim2.new(1, -50, 1, 0)
noclipLabel.Position = UDim2.new(0, 0, 0, 0)
noclipLabel.BackgroundTransparency = 1
noclipLabel.Text = "Noclip"
noclipLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
noclipLabel.TextScaled = true
noclipLabel.Font = Enum.Font.Gotham
noclipLabel.TextXAlignment = Enum.TextXAlignment.Left
noclipLabel.Parent = noclipFrame

local noclipToggle = Instance.new("TextButton")
noclipToggle.Name = "NoclipToggle"
noclipToggle.Size = UDim2.new(0, 40, 0, 20)
noclipToggle.Position = UDim2.new(1, -40, 0, 5)
noclipToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
noclipToggle.BorderSizePixel = 0
noclipToggle.Text = ""
noclipToggle.Parent = noclipFrame

local noclipToggleCorner = Instance.new("UICorner")
noclipToggleCorner.CornerRadius = UDim.new(0, 10)
noclipToggleCorner.Parent = noclipToggle

local followPlayerFrame = Instance.new("Frame")
followPlayerFrame.Name = "FollowPlayerFrame"
followPlayerFrame.Size = UDim2.new(1, 0, 0, 70)
followPlayerFrame.Position = UDim2.new(0, 0, 0, 220)
followPlayerFrame.BackgroundTransparency = 1
followPlayerFrame.Parent = contentFrame

local followPlayerLabel = Instance.new("TextLabel")
followPlayerLabel.Name = "FollowPlayerLabel"
followPlayerLabel.Size = UDim2.new(1, 0, 0, 20)
followPlayerLabel.Position = UDim2.new(0, 0, 0, 0)
followPlayerLabel.BackgroundTransparency = 1
followPlayerLabel.Text = "Follow Player"
followPlayerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
followPlayerLabel.TextScaled = true
followPlayerLabel.Font = Enum.Font.Gotham
followPlayerLabel.TextXAlignment = Enum.TextXAlignment.Left
followPlayerLabel.Parent = followPlayerFrame

local followPlayerInput = Instance.new("TextBox")
followPlayerInput.Name = "FollowPlayerInput"
followPlayerInput.Size = UDim2.new(1, -50, 0, 20)
followPlayerInput.Position = UDim2.new(0, 0, 0, 25)
followPlayerInput.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
followPlayerInput.BorderSizePixel = 0
followPlayerInput.Text = "Player Name"
followPlayerInput.TextColor3 = Color3.fromRGB(255, 255, 255)
followPlayerInput.TextScaled = true
followPlayerInput.Font = Enum.Font.Gotham
followPlayerInput.TextXAlignment = Enum.TextXAlignment.Center
followPlayerInput.Parent = followPlayerFrame

local followPlayerInputCorner = Instance.new("UICorner")
followPlayerInputCorner.CornerRadius = UDim.new(0, 4)
followPlayerInputCorner.Parent = followPlayerInput

local followPlayerToggle = Instance.new("TextButton")
followPlayerToggle.Name = "FollowPlayerToggle"
followPlayerToggle.Size = UDim2.new(0, 40, 0, 20)
followPlayerToggle.Position = UDim2.new(1, -40, 0, 25)
followPlayerToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
followPlayerToggle.BorderSizePixel = 0
followPlayerToggle.Text = ""
followPlayerToggle.Parent = followPlayerFrame

local followPlayerToggleCorner = Instance.new("UICorner")
followPlayerToggleCorner.CornerRadius = UDim.new(0, 10)
followPlayerToggleCorner.Parent = followPlayerToggle

local followPlayerStatus = Instance.new("TextLabel")
followPlayerStatus.Name = "FollowPlayerStatus"
followPlayerStatus.Size = UDim2.new(1, 0, 0, 20)
followPlayerStatus.Position = UDim2.new(0, 0, 0, 50)
followPlayerStatus.BackgroundTransparency = 1
followPlayerStatus.Text = "Status: OFF"
followPlayerStatus.TextColor3 = Color3.fromRGB(255, 255, 255)
followPlayerStatus.TextScaled = true
followPlayerStatus.Font = Enum.Font.Gotham
followPlayerStatus.TextXAlignment = Enum.TextXAlignment.Left
followPlayerStatus.Parent = followPlayerFrame

local infJumpEnabled = false
local noclipEnabled = false
local walkSpeedEnabled = false
local currentWalkSpeed = 27
local followPlayerEnabled = false
local targetPlayer = nil
local connections = {}

local function updateToggleAppearance(toggle, enabled)
    if enabled then
        toggle.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
    else
        toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    end
end

local function setupInfJump()
    if infJumpEnabled then
        connections.infJump = UserInputService.JumpRequest:Connect(function()
            local character = player.Character
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    else
        if connections.infJump then
            connections.infJump:Disconnect()
            connections.infJump = nil
        end
    end
end

local function setupWalkSpeed()
    if connections.walkSpeed then
        connections.walkSpeed:Disconnect()
    end
    
    connections.walkSpeed = RunService.Heartbeat:Connect(function()
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.WalkSpeed = currentWalkSpeed
        end
    end)
end

-- Verbesserte Noclip-Funktion
local function setupNoclip()
    if noclipEnabled then
        connections.noclip = RunService.Stepped:Connect(function()
            local character = player.Character
            if character then
                -- Alle Teile des Charakters durchgehen
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
                
                -- Auch Accessories behandeln
                for _, accessory in pairs(character:GetChildren()) do
                    if accessory:IsA("Accessory") then
                        local handle = accessory:FindFirstChild("Handle")
                        if handle then
                            handle.CanCollide = false
                        end
                    end
                end
            end
        end)
    else
        if connections.noclip then
            connections.noclip:Disconnect()
            connections.noclip = nil
        end
        
        -- Collision wieder aktivieren
        local character = player.Character
        if character then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    -- HumanoidRootPart soll normalerweise CanCollide = false haben
                    if part.Name == "HumanoidRootPart" then
                        part.CanCollide = false
                    else
                        part.CanCollide = true
                    end
                end
            end
            
            -- Accessories wieder aktivieren
            for _, accessory in pairs(character:GetChildren()) do
                if accessory:IsA("Accessory") then
                    local handle = accessory:FindFirstChild("Handle")
                    if handle then
                        handle.CanCollide = true
                    end
                end
            end
        end
    end
end

-- Alternative Noclip-Methode (falls die obere nicht funktioniert)
local function setupNoclipAdvanced()
    if noclipEnabled then
        connections.noclip = RunService.Stepped:Connect(function()
            local character = player.Character
            if character then
                -- Alle Descendants durchgehen (auch verschachtelte Teile)
                for _, descendant in pairs(character:GetDescendants()) do
                    if descendant:IsA("BasePart") then
                        descendant.CanCollide = false
                    end
                end
            end
        end)
    else
        if connections.noclip then
            connections.noclip:Disconnect()
            connections.noclip = nil
        end
        
        -- Collision wieder aktivieren
        local character = player.Character
        if character then
            for _, descendant in pairs(character:GetDescendants()) do
                if descendant:IsA("BasePart") then
                    if descendant.Name == "HumanoidRootPart" then
                        descendant.CanCollide = false -- HumanoidRootPart sollte immer false sein
                    else
                        descendant.CanCollide = true
                    end
                end
            end
        end
    end
end

-- Noch eine Alternative mit Raycast-Ignore
local function setupNoclipWithRaycast()
    if noclipEnabled then
        connections.noclip = RunService.Stepped:Connect(function()
            local character = player.Character
            if character then
                -- Normale Noclip-Methode
                for _, descendant in pairs(character:GetDescendants()) do
                    if descendant:IsA("BasePart") then
                        descendant.CanCollide = false
                    end
                end
                
                -- Zusätzlich: Humanoid-States manipulieren
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                end
            end
        end)
    else
        if connections.noclip then
            connections.noclip:Disconnect()
            connections.noclip = nil
        end
        
        local character = player.Character
        if character then
            for _, descendant in pairs(character:GetDescendants()) do
                if descendant:IsA("BasePart") then
                    if descendant.Name == "HumanoidRootPart" then
                        descendant.CanCollide = false
                    else
                        descendant.CanCollide = true
                    end
                end
            end
            
            -- Humanoid-State zurücksetzen
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Running)
            end
        end
    end
end

local function setupFollowPlayer()
    if followPlayerEnabled and targetPlayer then
        connections.followPlayer = RunService.Heartbeat:Connect(function()
            local myCharacter = player.Character
            local targetCharacter = targetPlayer.Character
            
            if myCharacter and targetCharacter and 
               myCharacter:FindFirstChild("HumanoidRootPart") and 
               targetCharacter:FindFirstChild("HumanoidRootPart") then
                
                local targetPosition = targetCharacter.HumanoidRootPart.Position
                local targetLookDirection = targetCharacter.HumanoidRootPart.CFrame.LookVector
                local behindPosition = targetPosition - (targetLookDirection * 2)
                
                myCharacter.HumanoidRootPart.CFrame = CFrame.new(behindPosition, targetPosition)
            end
        end)
        followPlayerStatus.Text = "Status: Following " .. targetPlayer.Name
    else
        if connections.followPlayer then
            connections.followPlayer:Disconnect()
            connections.followPlayer = nil
        end
        followPlayerStatus.Text = "Status: OFF"
    end
end

local function findPlayerByName(name)
    for _, p in pairs(Players:GetPlayers()) do
        if p.Name:lower():sub(1, #name) == name:lower() and p ~= player then
            return p
        end
    end
    return nil
end

redLightButton.MouseButton1Click:Connect(function()
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-49.88, 1023.10, 83.59))
        print("Teleported to RedLight GreenLight area")
    end
end)

teleportButton.MouseButton1Click:Connect(function()
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-215.15, 520.73, -1534.37))
        print("Teleported to custom location")
    end
end)

infJumpToggle.MouseButton1Click:Connect(function()
    infJumpEnabled = not infJumpEnabled
    updateToggleAppearance(infJumpToggle, infJumpEnabled)
    setupInfJump()
    print("Inf Jump:", infJumpEnabled)
end)

noclipToggle.MouseButton1Click:Connect(function()
    noclipEnabled = not noclipEnabled
    updateToggleAppearance(noclipToggle, noclipEnabled)
    setupNoclip()
    print("Noclip:", noclipEnabled)
end)

followPlayerToggle.MouseButton1Click:Connect(function()
    followPlayerEnabled = not followPlayerEnabled
    updateToggleAppearance(followPlayerToggle, followPlayerEnabled)
    
    if followPlayerEnabled then
        local inputName = followPlayerInput.Text
        if inputName and inputName ~= "Player Name" and inputName ~= "" then
            targetPlayer = findPlayerByName(inputName)
            if not targetPlayer then
                followPlayerEnabled = false
                updateToggleAppearance(followPlayerToggle, false)
                followPlayerStatus.Text = "Status: Player not found"
                return
            end
        else
            followPlayerEnabled = false
            updateToggleAppearance(followPlayerToggle, false)
            followPlayerStatus.Text = "Status: Enter player name"
            return
        end
    else
        targetPlayer = nil
    end
    
    setupFollowPlayer()
    print("Follow Player:", followPlayerEnabled)
end)

local dragging = false
local startPos = walkSpeedKnob.Position

walkSpeedKnob.MouseButton1Down:Connect(function()
    dragging = true
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = UserInputService:GetMouseLocation()
        local sliderPos = walkSpeedSlider.AbsolutePosition
        local sliderSize = walkSpeedSlider.AbsoluteSize
        
        local relativeX = mousePos.X - sliderPos.X
        local clampedX = math.max(0, math.min(relativeX, sliderSize.X))
        local percentage = clampedX / sliderSize.X
        
        walkSpeedKnob.Position = UDim2.new(percentage, -10, 0, 0)
        
        currentWalkSpeed = math.floor(16 + (percentage * 84))
        walkSpeedValue.Text = tostring(currentWalkSpeed)
        
        print("Walk Speed:", currentWalkSpeed)
    end
end)

closeButton.MouseButton1Click:Connect(function()
    for _, connection in pairs(connections) do
        if connection then
            connection:Disconnect()
        end
    end
    
    if noclipEnabled then
        local character = player.Character
        if character then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.CanCollide = true
                end
            end
        end
    end
    
    screenGui:Destroy()
end)

closeButton.MouseEnter:Connect(function()
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 70, 90)
end)

closeButton.MouseLeave:Connect(function()
    closeButton.BackgroundColor3 = Color3.fromRGB(220, 53, 69)
end)

followPlayerInput.FocusLost:Connect(function()
    if followPlayerInput.Text == "" then
        followPlayerInput.Text = "Player Name"
    end
end)

followPlayerInput.Focused:Connect(function()
    if followPlayerInput.Text == "Player Name" then
        followPlayerInput.Text = ""
    end
end)

setupWalkSpeed()

player.CharacterAdded:Connect(function(character)
    wait(1)
    
    setupWalkSpeed()
    
    if infJumpEnabled then
        setupInfJump()
    end
    
    if noclipEnabled then
        setupNoclip()
    end
    
    if followPlayerEnabled then
        setupFollowPlayer()
    end
end)
