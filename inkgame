-- Walk Speed Button mit Slider und kontinuierlichem Loop
local function createWalkSpeedButton()
    local button = Instance.new("Frame")
    button.Name = "WalkSpeedButton"
    button.Size = UDim2.new(1, 0, 0, 40)
    button.Position = UDim2.new(0, 0, 0, 200)
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.BorderSizePixel = 0
    button.Parent = buttonContainer
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = button
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.4, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = "Walk Speed"
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextScaled = true
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = button
    
    local labelPadding = Instance.new("UIPadding")
    labelPadding.PaddingLeft = UDim.new(0, 10)
    labelPadding.Parent = label
    
    local sliderContainer = Instance.new("Frame")
    sliderContainer.Size = UDim2.new(0, 120, 0, 20)
    sliderContainer.Position = UDim2.new(1, -130, 0.5, -10)
    sliderContainer.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    sliderContainer.BorderSizePixel = 0
    sliderContainer.Parent = button
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 10)
    sliderCorner.Parent = sliderContainer
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new(0.5, 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderContainer
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 10)
    fillCorner.Parent = sliderFill
    
    local sliderButton = Instance.new("Frame")
    sliderButton.Size = UDim2.new(0, 16, 0, 16)
    sliderButton.Position = UDim2.new(0.5, -8, 0.5, -8)
    sliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderButton.BorderSizePixel = 0
    sliderButton.Parent = sliderContainer
    
    local sliderButtonCorner = Instance.new("UICorner")
    sliderButtonCorner.CornerRadius = UDim.new(0, 8)
    sliderButtonCorner.Parent = sliderButton
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0, 30, 0, 20)
    valueLabel.Position = UDim2.new(1, -25, 0.5, -10)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = "28"
    valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    valueLabel.TextScaled = true
    valueLabel.Font = Enum.Font.SourceSans
    valueLabel.Parent = button
    
    local minValue = 16
    local maxValue = 100
    local currentValue = 28
    local isDragging = false
    
    -- Variablen für kontinuierlichen Loop
    local walkSpeedConnection = nil
    local walkSpeedEnabled = false
    
    local function updateSlider(value)
        currentValue = math.clamp(value, minValue, maxValue)
        local percentage = (currentValue - minValue) / (maxValue - minValue)
        
        sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
        sliderButton.Position = UDim2.new(percentage, -8, 0.5, -8)
        valueLabel.Text = tostring(math.floor(currentValue))
        
        -- Starte kontinuierlichen Loop wenn noch nicht aktiv
        if not walkSpeedEnabled then
            walkSpeedEnabled = true
            walkSpeedConnection = RunService.Heartbeat:Connect(function()
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    local humanoid = player.Character.Humanoid
                    if humanoid.WalkSpeed ~= currentValue then
                        humanoid.WalkSpeed = currentValue
                    end
                end
            end)
        end
    end
    
    sliderContainer.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
            local connection
            connection = UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
                    local relativeX = input.Position.X - sliderContainer.AbsolutePosition.X
                    local percentage = math.clamp(relativeX / sliderContainer.AbsoluteSize.X, 0, 1)
                    local newValue = minValue + (percentage * (maxValue - minValue))
                    updateSlider(newValue)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                    connection:Disconnect()
                end
            end)
        end
    end)
    
    updateSlider(currentValue)
    
    -- Cleanup-Funktion für Walk Speed Loop
    local function cleanupWalkSpeed()
        if walkSpeedConnection then
            walkSpeedConnection:Disconnect()
            walkSpeedConnection = nil
            walkSpeedEnabled = false
        end
    end
    
    -- Cleanup bei GUI Zerstörung
    screenGui.AncestryChanged:Connect(function()
        if not screenGui.Parent then
            cleanupWalkSpeed()
        end
    end)
    
    return button, cleanupWalkSpeed
end

-- Zusätzliche Variablen am Anfang des Scripts hinzufügen:
local walkSpeedCleanup = nil

-- Die createWalkSpeedButton() Funktion aufrufen:
local walkSpeedButton, walkSpeedCleanupFunc = createWalkSpeedButton()
walkSpeedCleanup = walkSpeedCleanupFunc

-- Im Character Respawn Handler hinzufügen:
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    originalJumpPower = humanoid.JumpPower
    
    if infJumpEnabled then
        enableInfiniteJump()
    end
    
    if tugOfWarEnabled then
        enableTugOfWar()
    end
    
    if glassVisionEnabled then
        -- Deaktiviere und aktiviere Glass Vision neu nach Respawn
        disableGlassVision()
        task.wait(1)
        enableGlassVision()
    end
    
    -- Walk Speed wird automatisch durch den Loop gesetzt
    -- Keine manuelle Setzung nötig
    
    currentCoordIndex = 1
end)

-- Im Cleanup-Bereich am Ende hinzufügen:
screenGui.AncestryChanged:Connect(function()
    if not screenGui.Parent then
        disableGlassVision()
        disableTugOfWar()
        disableInfiniteJump()
        
        if noclipConnection then
            noclipConnection:Disconnect()
        end
        
        -- Walk Speed Cleanup
        if walkSpeedCleanup then
            walkSpeedCleanup()
        end
    end
end)
