local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local colors = {
    bg = Color3.fromRGB(18, 18, 23),
    surface = Color3.fromRGB(30, 30, 40),
    surfaceHover = Color3.fromRGB(40, 40, 50),
    primary = Color3.fromRGB(99, 102, 241),
    primaryHover = Color3.fromRGB(79, 70, 229),
    success = Color3.fromRGB(16, 185, 129),
    danger = Color3.fromRGB(239, 68, 68),
    warning = Color3.fromRGB(245, 158, 11),
    text = Color3.fromRGB(248, 250, 252),
    textSecondary = Color3.fromRGB(148, 163, 184),
    textMuted = Color3.fromRGB(100, 116, 139),
    accent = Color3.fromRGB(139, 92, 246),
    border = Color3.fromRGB(51, 65, 85)
}

local settings = {
    toggleKey = Enum.KeyCode.F
}

local gameState = {
    chams = false,
    infJump = false,
    noclip = false,
    walkSpeed = 27,
    followPlayer = false,
    targetPlayer = nil,
    connections = {}
}

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ModernINKGameGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local mainWindow = Instance.new("Frame")
mainWindow.Name = "MainWindow"
mainWindow.Size = UDim2.new(0, 450, 0, 650)
mainWindow.Position = UDim2.new(0.5, -225, 0.5, -325)
mainWindow.BackgroundColor3 = colors.bg
mainWindow.BorderSizePixel = 0
mainWindow.Active = true
mainWindow.Parent = screenGui

local windowBorder = Instance.new("UIStroke")
windowBorder.Color = colors.primary
windowBorder.Thickness = 2
windowBorder.Transparency = 0.3
windowBorder.Parent = mainWindow

local windowCorner = Instance.new("UICorner")
windowCorner.CornerRadius = UDim.new(0, 16)
windowCorner.Parent = mainWindow

local shadowFrame = Instance.new("Frame")
shadowFrame.Name = "Shadow"
shadowFrame.Size = UDim2.new(1, 30, 1, 30)
shadowFrame.Position = UDim2.new(0, -15, 0, -15)
shadowFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
shadowFrame.BackgroundTransparency = 0.7
shadowFrame.ZIndex = mainWindow.ZIndex - 1
shadowFrame.Parent = mainWindow

local shadowCorner = Instance.new("UICorner")
shadowCorner.CornerRadius = UDim.new(0, 20)
shadowCorner.Parent = shadowFrame

local header = Instance.new("Frame")
header.Name = "Header"
header.Size = UDim2.new(1, 0, 0, 70)
header.BackgroundColor3 = colors.surface
header.BorderSizePixel = 0
header.Parent = mainWindow

local headerCorner = Instance.new("UICorner")
headerCorner.CornerRadius = UDim.new(0, 16)
headerCorner.Parent = header

local headerGradient = Instance.new("Frame")
headerGradient.Size = UDim2.new(1, 0, 1, 0)
headerGradient.BackgroundColor3 = colors.primary
headerGradient.BackgroundTransparency = 0.9
headerGradient.BorderSizePixel = 0
headerGradient.Parent = header

local headerGradientCorner = Instance.new("UICorner")
headerGradientCorner.CornerRadius = UDim.new(0, 16)
headerGradientCorner.Parent = headerGradient

local headerGradientEffect = Instance.new("UIGradient")
headerGradientEffect.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, colors.primary),
    ColorSequenceKeypoint.new(1, colors.accent)
}
headerGradientEffect.Rotation = 45
headerGradientEffect.Parent = headerGradient

local titleIcon = Instance.new("TextLabel")
titleIcon.Size = UDim2.new(0, 40, 0, 40)
titleIcon.Position = UDim2.new(0, 20, 0, 15)
titleIcon.BackgroundTransparency = 1
titleIcon.Text = "🎮"
titleIcon.TextColor3 = colors.text
titleIcon.Font = Enum.Font.GothamBold
titleIcon.TextSize = 24
titleIcon.Parent = header

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -180, 0, 30)
title.Position = UDim2.new(0, 70, 0, 10)
title.BackgroundTransparency = 1
title.Text = "INK GAME"
title.TextColor3 = colors.text
title.Font = Enum.Font.GothamBold
title.TextSize = 22
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = header

local subtitle = Instance.new("TextLabel")
subtitle.Size = UDim2.new(1, -180, 0, 20)
subtitle.Position = UDim2.new(0, 70, 0, 40)
subtitle.BackgroundTransparency = 1
subtitle.Text = "Made by massivendurchfall + jasonstinkthardnachkacke • " .. settings.toggleKey.Name .. " to toggle"
subtitle.TextColor3 = colors.textSecondary
subtitle.Font = Enum.Font.Gotham
subtitle.TextSize = 11
subtitle.TextXAlignment = Enum.TextXAlignment.Left
subtitle.Parent = header

local headerButtons = Instance.new("Frame")
headerButtons.Size = UDim2.new(0, 100, 0, 40)
headerButtons.Position = UDim2.new(1, -110, 0, 15)
headerButtons.BackgroundTransparency = 1
headerButtons.Parent = header

local headerButtonLayout = Instance.new("UIListLayout")
headerButtonLayout.FillDirection = Enum.FillDirection.Horizontal
headerButtonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
headerButtonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
headerButtonLayout.Padding = UDim.new(0, 8)
headerButtonLayout.Parent = headerButtons

local settingsBtn = Instance.new("TextButton")
settingsBtn.Size = UDim2.new(0, 36, 0, 36)
settingsBtn.BackgroundColor3 = colors.surface
settingsBtn.BorderSizePixel = 0
settingsBtn.Text = "⚙"
settingsBtn.TextColor3 = colors.text
settingsBtn.Font = Enum.Font.GothamBold
settingsBtn.TextSize = 14
settingsBtn.Parent = headerButtons

local settingsBtnCorner = Instance.new("UICorner")
settingsBtnCorner.CornerRadius = UDim.new(0, 8)
settingsBtnCorner.Parent = settingsBtn

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 36, 0, 36)
closeBtn.BackgroundColor3 = colors.danger
closeBtn.BorderSizePixel = 0
closeBtn.Text = "×"
closeBtn.TextColor3 = colors.text
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = 18
closeBtn.Parent = headerButtons

local closeBtnCorner = Instance.new("UICorner")
closeBtnCorner.CornerRadius = UDim.new(0, 8)
closeBtnCorner.Parent = closeBtn

local content = Instance.new("ScrollingFrame")
content.Name = "Content"
content.Size = UDim2.new(1, -40, 1, -90)
content.Position = UDim2.new(0, 20, 0, 80)
content.BackgroundTransparency = 1
content.BorderSizePixel = 0
content.ScrollBarThickness = 6
content.ScrollBarImageColor3 = colors.primary
content.ScrollBarImageTransparency = 0.3
content.CanvasSize = UDim2.new(0, 0, 0, 800)
content.Parent = mainWindow

local contentLayout = Instance.new("UIListLayout")
contentLayout.Padding = UDim.new(0, 20)
contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
contentLayout.Parent = content

local function createSection(name, height)
    local section = Instance.new("Frame")
    section.Name = name
    section.Size = UDim2.new(1, 0, 0, height)
    section.BackgroundColor3 = colors.surface
    section.BorderSizePixel = 0
    section.Parent = content
    
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.CornerRadius = UDim.new(0, 12)
    sectionCorner.Parent = section
    
    local sectionBorder = Instance.new("UIStroke")
    sectionBorder.Color = colors.border
    sectionBorder.Thickness = 1
    sectionBorder.Transparency = 0.5
    sectionBorder.Parent = section
    
    local sectionPadding = Instance.new("UIPadding")
    sectionPadding.PaddingTop = UDim.new(0, 20)
    sectionPadding.PaddingBottom = UDim.new(0, 20)
    sectionPadding.PaddingLeft = UDim.new(0, 20)
    sectionPadding.PaddingRight = UDim.new(0, 20)
    sectionPadding.Parent = section
    
    return section
end

local function createToggle(parent, position, defaultState, callback)
    local toggleContainer = Instance.new("Frame")
    toggleContainer.Size = UDim2.new(0, 54, 0, 28)
    toggleContainer.Position = position
    toggleContainer.BackgroundColor3 = defaultState and colors.success or colors.textMuted
    toggleContainer.BorderSizePixel = 0
    toggleContainer.Parent = parent
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 14)
    toggleCorner.Parent = toggleContainer
    
    local toggleKnob = Instance.new("Frame")
    toggleKnob.Size = UDim2.new(0, 24, 0, 24)
    toggleKnob.Position = defaultState and UDim2.new(1, -26, 0, 2) or UDim2.new(0, 2, 0, 2)
    toggleKnob.BackgroundColor3 = colors.text
    toggleKnob.BorderSizePixel = 0
    toggleKnob.Parent = toggleContainer
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(0, 12)
    knobCorner.Parent = toggleKnob
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Size = UDim2.new(1, 0, 1, 0)
    toggleBtn.BackgroundTransparency = 1
    toggleBtn.Text = ""
    toggleBtn.Parent = toggleContainer
    
    local isToggled = defaultState
    
    toggleBtn.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        
        local bgTween = TweenService:Create(toggleContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
            BackgroundColor3 = isToggled and colors.success or colors.textMuted
        })
        
        local knobTween = TweenService:Create(toggleKnob, TweenInfo.new(0.3, Enum.EasingStyle.Back), {
            Position = isToggled and UDim2.new(1, -26, 0, 2) or UDim2.new(0, 2, 0, 2)
        })
        
        bgTween:Play()
        knobTween:Play()
        
        if callback then callback(isToggled) end
    end)
    
    return toggleContainer, function(state)
        isToggled = state
        toggleContainer.BackgroundColor3 = isToggled and colors.success or colors.textMuted
        toggleKnob.Position = isToggled and UDim2.new(1, -26, 0, 2) or UDim2.new(0, 2, 0, 2)
    end
end

local function createDropdown(parent, position, size, placeholder)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Size = size
    dropdownFrame.Position = position
    dropdownFrame.BackgroundColor3 = colors.surface
    dropdownFrame.BorderSizePixel = 0
    dropdownFrame.Parent = parent
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 8)
    dropdownCorner.Parent = dropdownFrame
    
    local dropdownBorder = Instance.new("UIStroke")
    dropdownBorder.Color = colors.border
    dropdownBorder.Thickness = 1
    dropdownBorder.Transparency = 0.3
    dropdownBorder.Parent = dropdownFrame
    
    local dropdownBtn = Instance.new("TextButton")
    dropdownBtn.Size = UDim2.new(1, 0, 1, 0)
    dropdownBtn.BackgroundTransparency = 1
    dropdownBtn.Text = placeholder .. " ▼"
    dropdownBtn.TextColor3 = colors.text
    dropdownBtn.Font = Enum.Font.Gotham
    dropdownBtn.TextSize = 14
    dropdownBtn.Parent = dropdownFrame
    
    local selectedLabel = Instance.new("TextLabel")
    selectedLabel.Size = UDim2.new(1, -40, 1, 0)
    selectedLabel.Position = UDim2.new(0, 15, 0, 0)
    selectedLabel.BackgroundTransparency = 1
    selectedLabel.Text = "None selected"
    selectedLabel.TextColor3 = colors.textSecondary
    selectedLabel.Font = Enum.Font.Gotham
    selectedLabel.TextSize = 14
    selectedLabel.TextXAlignment = Enum.TextXAlignment.Left
    selectedLabel.Parent = dropdownFrame
    
    local optionsFrame = Instance.new("ScrollingFrame")
    optionsFrame.Size = UDim2.new(1, 0, 0, 150)
    optionsFrame.Position = UDim2.new(0, 0, 1, 5)
    optionsFrame.BackgroundColor3 = colors.bg
    optionsFrame.BorderSizePixel = 0
    optionsFrame.ScrollBarThickness = 4
    optionsFrame.ScrollBarImageColor3 = colors.primary
    optionsFrame.Visible = false
    optionsFrame.ZIndex = 10
    optionsFrame.Parent = dropdownFrame
    
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 8)
    optionsCorner.Parent = optionsFrame
    
    local optionsBorder = Instance.new("UIStroke")
    optionsBorder.Color = colors.border
    optionsBorder.Thickness = 1
    optionsBorder.Transparency = 0.3
    optionsBorder.Parent = optionsFrame
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.Padding = UDim.new(0, 2)
    optionsLayout.Parent = optionsFrame
    
    local function updateOptions()
        for _, child in pairs(optionsFrame:GetChildren()) do
            if child:IsA("TextButton") then child:Destroy() end
        end
        
        local yPos = 0
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= player then
                local option = Instance.new("TextButton")
                option.Size = UDim2.new(1, -4, 0, 40)
                option.Position = UDim2.new(0, 2, 0, yPos)
                option.BackgroundColor3 = colors.surface
                option.BorderSizePixel = 0
                option.Text = p.DisplayName .. " (@" .. p.Name .. ")"
                option.TextColor3 = colors.text
                option.Font = Enum.Font.Gotham
                option.TextSize = 12
                option.TextXAlignment = Enum.TextXAlignment.Left
                option.Parent = optionsFrame
                
                local optionCorner = Instance.new("UICorner")
                optionCorner.CornerRadius = UDim.new(0, 6)
                optionCorner.Parent = option
                
                local optionPadding = Instance.new("UIPadding")
                optionPadding.PaddingLeft = UDim.new(0, 12)
                optionPadding.Parent = option
                
                option.MouseEnter:Connect(function()
                    TweenService:Create(option, TweenInfo.new(0.2), {BackgroundColor3 = colors.primary}):Play()
                end)
                option.MouseLeave:Connect(function()
                    TweenService:Create(option, TweenInfo.new(0.2), {BackgroundColor3 = colors.surface}):Play()
                end)
                
                option.MouseButton1Click:Connect(function()
                    gameState.targetPlayer = p
                    selectedLabel.Text = p.DisplayName .. " (@" .. p.Name .. ")"
                    optionsFrame.Visible = false
                    dropdownBtn.Visible = true
                end)
                
                yPos = yPos + 42
            end
        end
        optionsFrame.CanvasSize = UDim2.new(0, 0, 0, yPos)
    end
    
    dropdownBtn.MouseButton1Click:Connect(function()
        optionsFrame.Visible = not optionsFrame.Visible
        dropdownBtn.Visible = not optionsFrame.Visible
        if optionsFrame.Visible then 
            updateOptions()
        end
    end)
    
    return dropdownFrame, selectedLabel, function() 
        updateOptions()
        if optionsFrame.Visible then
            updateOptions()
        end
    end
end

local function updateChamsForAllPlayers()
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= player and p.Character then
            for _, part in pairs(p.Character:GetDescendants()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    if gameState.chams then
                        if not part:FindFirstChild("PlayerCham") then
                            local highlight = Instance.new("Highlight")
                            highlight.Name = "PlayerCham"
                            highlight.Adornee = part
                            highlight.FillColor = colors.accent
                            highlight.OutlineColor = colors.text
                            highlight.FillTransparency = 0.3
                            highlight.OutlineTransparency = 0
                            highlight.Parent = part
                        end
                    else
                        local highlight = part:FindFirstChild("PlayerCham")
                        if highlight then highlight:Destroy() end
                    end
                end
            end
        end
    end
end

local chamsSection = createSection("ChamsSection", 80)

local chamsTitle = Instance.new("TextLabel")
chamsTitle.Size = UDim2.new(1, -60, 0, 24)
chamsTitle.BackgroundTransparency = 1
chamsTitle.Text = "👁 Player Chams"
chamsTitle.TextColor3 = colors.text
chamsTitle.Font = Enum.Font.GothamBold
chamsTitle.TextSize = 16
chamsTitle.TextXAlignment = Enum.TextXAlignment.Left
chamsTitle.Parent = chamsSection

local chamsDesc = Instance.new("TextLabel")
chamsDesc.Size = UDim2.new(1, -60, 0, 16)
chamsDesc.Position = UDim2.new(0, 0, 0, 24)
chamsDesc.BackgroundTransparency = 1
chamsDesc.Text = "Highlight all players with glowing outlines"
chamsDesc.TextColor3 = colors.textSecondary
chamsDesc.Font = Enum.Font.Gotham
chamsDesc.TextSize = 12
chamsDesc.TextXAlignment = Enum.TextXAlignment.Left
chamsDesc.Parent = chamsSection

local chamsToggle, setChamsToggle = createToggle(chamsSection, UDim2.new(1, -54, 0, 16), false, function(enabled)
    gameState.chams = enabled
    updateChamsForAllPlayers()
end)

local movementSection = createSection("MovementSection", 200)

local movementTitle = Instance.new("TextLabel")
movementTitle.Size = UDim2.new(1, 0, 0, 24)
movementTitle.BackgroundTransparency = 1
movementTitle.Text = "🏃 Movement Controls"
movementTitle.TextColor3 = colors.text
movementTitle.Font = Enum.Font.GothamBold
movementTitle.TextSize = 16
movementTitle.TextXAlignment = Enum.TextXAlignment.Left
movementTitle.Parent = movementSection

local infJumpLabel = Instance.new("TextLabel")
infJumpLabel.Size = UDim2.new(1, -60, 0, 20)
infJumpLabel.Position = UDim2.new(0, 0, 0, 40)
infJumpLabel.BackgroundTransparency = 1
infJumpLabel.Text = "Infinite Jump"
infJumpLabel.TextColor3 = colors.text
infJumpLabel.Font = Enum.Font.Gotham
infJumpLabel.TextSize = 14
infJumpLabel.TextXAlignment = Enum.TextXAlignment.Left
infJumpLabel.Parent = movementSection

local infJumpToggle, setInfJumpToggle = createToggle(movementSection, UDim2.new(1, -54, 0, 40), false, function(enabled)
    gameState.infJump = enabled
    if enabled then
        gameState.connections.infJump = UserInputService.JumpRequest:Connect(function()
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    else
        if gameState.connections.infJump then
            gameState.connections.infJump:Disconnect()
            gameState.connections.infJump = nil
        end
    end
end)

local noclipLabel = Instance.new("TextLabel")
noclipLabel.Size = UDim2.new(1, -60, 0, 20)
noclipLabel.Position = UDim2.new(0, 0, 0, 75)
noclipLabel.BackgroundTransparency = 1
noclipLabel.Text = "Noclip"
noclipLabel.TextColor3 = colors.text
noclipLabel.Font = Enum.Font.Gotham
noclipLabel.TextSize = 14
noclipLabel.TextXAlignment = Enum.TextXAlignment.Left
noclipLabel.Parent = movementSection

local noclipToggle, setNoclipToggle = createToggle(movementSection, UDim2.new(1, -54, 0, 75), false, function(enabled)
    gameState.noclip = enabled
    if enabled then
        gameState.connections.noclip = RunService.Stepped:Connect(function()
            if player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if gameState.connections.noclip then
            gameState.connections.noclip:Disconnect()
            gameState.connections.noclip = nil
        end
        if player.Character then
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.CanCollide = true
                end
            end
        end
    end
end)

local walkSpeedLabel = Instance.new("TextLabel")
walkSpeedLabel.Size = UDim2.new(1, 0, 0, 20)
walkSpeedLabel.Position = UDim2.new(0, 0, 0, 110)
walkSpeedLabel.BackgroundTransparency = 1
walkSpeedLabel.Text = "Walk Speed: " .. gameState.walkSpeed
walkSpeedLabel.TextColor3 = colors.text
walkSpeedLabel.Font = Enum.Font.Gotham
walkSpeedLabel.TextSize = 14
walkSpeedLabel.TextXAlignment = Enum.TextXAlignment.Left
walkSpeedLabel.Parent = movementSection

local walkSpeedSlider = Instance.new("Frame")
walkSpeedSlider.Size = UDim2.new(1, 0, 0, 30)
walkSpeedSlider.Position = UDim2.new(0, 0, 0, 135)
walkSpeedSlider.BackgroundColor3 = colors.border
walkSpeedSlider.BorderSizePixel = 0
walkSpeedSlider.Parent = movementSection

local sliderCorner = Instance.new("UICorner")
sliderCorner.CornerRadius = UDim.new(0, 15)
sliderCorner.Parent = walkSpeedSlider

local walkSpeedKnob = Instance.new("TextButton")
walkSpeedKnob.Size = UDim2.new(0, 30, 0, 30)
walkSpeedKnob.Position = UDim2.new(0.5, -15, 0, 0)
walkSpeedKnob.BackgroundColor3 = colors.primary
walkSpeedKnob.BorderSizePixel = 0
walkSpeedKnob.Text = ""
walkSpeedKnob.Parent = walkSpeedSlider

local knobCorner = Instance.new("UICorner")
knobCorner.CornerRadius = UDim.new(0, 15)
knobCorner.Parent = walkSpeedKnob

local dragging = false
walkSpeedKnob.MouseButton1Down:Connect(function() dragging = true end)
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = UserInputService:GetMouseLocation()
        local sliderPos = walkSpeedSlider.AbsolutePosition
        local sliderSize = walkSpeedSlider.AbsoluteSize
        
        local relativeX = mousePos.X - sliderPos.X
        local clampedX = math.max(0, math.min(relativeX, sliderSize.X))
        local percentage = clampedX / sliderSize.X
        
        walkSpeedKnob.Position = UDim2.new(percentage, -15, 0, 0)
        gameState.walkSpeed = math.floor(16 + (percentage * 84))
        walkSpeedLabel.Text = "Walk Speed: " .. gameState.walkSpeed
    end
end)

local followSection = createSection("FollowSection", 120)

local followTitle = Instance.new("TextLabel")
followTitle.Size = UDim2.new(1, 0, 0, 24)
followTitle.BackgroundTransparency = 1
followTitle.Text = "👥 Follow Player"
followTitle.TextColor3 = colors.text
followTitle.Font = Enum.Font.GothamBold
followTitle.TextSize = 16
followTitle.TextXAlignment = Enum.TextXAlignment.Left
followTitle.Parent = followSection

local followDropdown, followSelected, updateFollowDropdown = createDropdown(
    followSection, 
    UDim2.new(0, 0, 0, 35), 
    UDim2.new(1, -60, 0, 40),
    "Select Player"
)

local followToggle, setFollowToggle = createToggle(followSection, UDim2.new(1, -54, 0, 45), false, function(enabled)
    gameState.followPlayer = enabled
    if enabled and gameState.targetPlayer then
        gameState.connections.follow = RunService.Heartbeat:Connect(function()
            if player.Character and gameState.targetPlayer.Character and 
               player.Character:FindFirstChild("HumanoidRootPart") and 
               gameState.targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                
                local targetPos = gameState.targetPlayer.Character.HumanoidRootPart.Position
                local targetLook = gameState.targetPlayer.Character.HumanoidRootPart.CFrame.LookVector
                local behindPos = targetPos - (targetLook * 2)
                
                player.Character.HumanoidRootPart.CFrame = CFrame.new(behindPos, targetPos)
            end
        end)
    else
        if gameState.connections.follow then
            gameState.connections.follow:Disconnect()
            gameState.connections.follow = nil
        end
    end
end)

local teleportsSection = createSection("TeleportsSection", 120)

local teleportsTitle = Instance.new("TextLabel")
teleportsTitle.Size = UDim2.new(1, 0, 0, 24)
teleportsTitle.BackgroundTransparency = 1
teleportsTitle.Text = "🚀 Quick Teleports"
teleportsTitle.TextColor3 = colors.text
teleportsTitle.Font = Enum.Font.GothamBold
teleportsTitle.TextSize = 16
teleportsTitle.TextXAlignment = Enum.TextXAlignment.Left
teleportsTitle.Parent = teleportsSection

local teleportButtonsFrame = Instance.new("Frame")
teleportButtonsFrame.Size = UDim2.new(1, 0, 1, -35)
teleportButtonsFrame.Position = UDim2.new(0, 0, 0, 35)
teleportButtonsFrame.BackgroundTransparency = 1
teleportButtonsFrame.Parent = teleportsSection

local teleportLayout = Instance.new("UIGridLayout")
teleportLayout.CellSize = UDim2.new(0, 190, 0, 40)
teleportLayout.CellPadding = UDim2.new(0, 10, 0, 10)
teleportLayout.Parent = teleportButtonsFrame

local function createTeleportButton(text, color, position)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 190, 0, 40)
    btn.BackgroundColor3 = color
    btn.BorderSizePixel = 0
    btn.Text = text
    btn.TextColor3 = colors.text
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 14
    btn.Parent = teleportButtonsFrame
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 8)
    btnCorner.Parent = btn
    
    local btnGradient = Instance.new("UIGradient")
    btnGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, color),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(
            math.max(0, color.R * 255 - 20)/255,
            math.max(0, color.G * 255 - 20)/255,
            math.max(0, color.B * 255 - 20)/255
        ))
    }
    btnGradient.Rotation = 90
    btnGradient.Parent = btn
    
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            Size = UDim2.new(0, 195, 0, 42),
            BackgroundTransparency = 0
        }):Play()
    end)
    
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            Size = UDim2.new(0, 190, 0, 40),
            BackgroundTransparency = 0.1
        }):Play()
    end)
    
    return btn
end

local redLightBtn = createTeleportButton("🔴 Red Light Green Light", colors.danger)
redLightBtn.MouseButton1Click:Connect(function()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-49.88, 1023.10, 83.59))
    end
end)

local glassGameBtn = createTeleportButton("🏁 Finish Glass Game", colors.success)
glassGameBtn.MouseButton1Click:Connect(function()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-215.15, 520.73, -1534.37))
    end
end)

local settingsModal = Instance.new("Frame")
settingsModal.Name = "SettingsModal"
settingsModal.Size = UDim2.new(0, 400, 0, 250)
settingsModal.Position = UDim2.new(0.5, -200, 0.5, -125)
settingsModal.BackgroundColor3 = colors.bg
settingsModal.BorderSizePixel = 0
settingsModal.Visible = false
settingsModal.ZIndex = 25
settingsModal.Parent = screenGui

local modalCorner = Instance.new("UICorner")
modalCorner.CornerRadius = UDim.new(0, 16)
modalCorner.Parent = settingsModal

local modalBorder = Instance.new("UIStroke")
modalBorder.Color = colors.primary
modalBorder.Thickness = 2
modalBorder.Transparency = 0.3
modalBorder.Parent = settingsModal

local modalBackdrop = Instance.new("Frame")
modalBackdrop.Size = UDim2.new(1, 0, 1, 0)
modalBackdrop.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
modalBackdrop.BackgroundTransparency = 0.5
modalBackdrop.BorderSizePixel = 0
modalBackdrop.Visible = false
modalBackdrop.ZIndex = 24
modalBackdrop.Parent = screenGui

local modalPadding = Instance.new("UIPadding")
modalPadding.PaddingTop = UDim.new(0, 30)
modalPadding.PaddingBottom = UDim.new(0, 30)
modalPadding.PaddingLeft = UDim.new(0, 30)
modalPadding.PaddingRight = UDim.new(0, 30)
modalPadding.Parent = settingsModal

local modalTitle = Instance.new("TextLabel")
modalTitle.Size = UDim2.new(1, 0, 0, 30)
modalTitle.BackgroundTransparency = 1
modalTitle.Text = "⚙ Settings"
modalTitle.TextColor3 = colors.text
modalTitle.Font = Enum.Font.GothamBold
modalTitle.TextSize = 20
modalTitle.TextXAlignment = Enum.TextXAlignment.Left
modalTitle.Parent = settingsModal

local hotkeyLabel = Instance.new("TextLabel")
hotkeyLabel.Size = UDim2.new(1, 0, 0, 20)
hotkeyLabel.Position = UDim2.new(0, 0, 0, 60)
hotkeyLabel.BackgroundTransparency = 1
hotkeyLabel.Text = "Toggle Hotkey:"
hotkeyLabel.TextColor3 = colors.textSecondary
hotkeyLabel.Font = Enum.Font.Gotham
hotkeyLabel.TextSize = 14
hotkeyLabel.TextXAlignment = Enum.TextXAlignment.Left
hotkeyLabel.Parent = settingsModal

local hotkeyInput = Instance.new("TextBox")
hotkeyInput.Size = UDim2.new(1, 0, 0, 45)
hotkeyInput.Position = UDim2.new(0, 0, 0, 85)
hotkeyInput.BackgroundColor3 = colors.surface
hotkeyInput.BorderSizePixel = 0
hotkeyInput.Text = settings.toggleKey.Name
hotkeyInput.TextColor3 = colors.text
hotkeyInput.Font = Enum.Font.Gotham
hotkeyInput.TextSize = 16
hotkeyInput.PlaceholderText = "Enter key name (e.g., F, G, H)"
hotkeyInput.PlaceholderColor3 = colors.textMuted
hotkeyInput.Parent = settingsModal

local inputCorner = Instance.new("UICorner")
inputCorner.CornerRadius = UDim.new(0, 8)
inputCorner.Parent = hotkeyInput

local inputBorder = Instance.new("UIStroke")
inputBorder.Color = colors.border
inputBorder.Thickness = 1
inputBorder.Transparency = 0.5
inputBorder.Parent = hotkeyInput

local modalButtonsFrame = Instance.new("Frame")
modalButtonsFrame.Size = UDim2.new(1, 0, 0, 45)
modalButtonsFrame.Position = UDim2.new(0, 0, 1, -45)
modalButtonsFrame.BackgroundTransparency = 1
modalButtonsFrame.Parent = settingsModal

local modalButtonLayout = Instance.new("UIListLayout")
modalButtonLayout.FillDirection = Enum.FillDirection.Horizontal
modalButtonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
modalButtonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
modalButtonLayout.Padding = UDim.new(0, 15)
modalButtonLayout.Parent = modalButtonsFrame

local function createModalButton(text, color, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 100, 0, 45)
    btn.BackgroundColor3 = color
    btn.BorderSizePixel = 0
    btn.Text = text
    btn.TextColor3 = colors.text
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 14
    btn.Parent = modalButtonsFrame
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 8)
    btnCorner.Parent = btn
    
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            BackgroundTransparency = 0,
            Size = UDim2.new(0, 105, 0, 47)
        }):Play()
    end)
    
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            BackgroundTransparency = 0.1,
            Size = UDim2.new(0, 100, 0, 45)
        }):Play()
    end)
    
    if callback then btn.MouseButton1Click:Connect(callback) end
    return btn
end

createModalButton("Cancel", colors.textMuted, function()
    settingsModal.Visible = false
    modalBackdrop.Visible = false
    hotkeyInput.Text = settings.toggleKey.Name
end)

createModalButton("Save", colors.success, function()
    local keyName = hotkeyInput.Text:upper()
    local key = Enum.KeyCode[keyName]
    if key then
        settings.toggleKey = key
        subtitle.Text = "Made by massivendurchfall + jasonstinkthardnachkacke • " .. settings.toggleKey.Name .. " to toggle"
        settingsModal.Visible = false
        modalBackdrop.Visible = false
    else
        hotkeyInput.Text = "Invalid Key!"
        wait(1)
        hotkeyInput.Text = settings.toggleKey.Name
    end
end)

settingsBtn.MouseButton1Click:Connect(function()
    settingsModal.Visible = true
    modalBackdrop.Visible = true
end)

closeBtn.MouseButton1Click:Connect(function()
    if gameState.connections.dropdownMonitor then
        task.cancel(gameState.connections.dropdownMonitor)
    end
    
    for _, connection in pairs(gameState.connections) do
        if connection then connection:Disconnect() end
    end
    
    for _, p in pairs(Players:GetPlayers()) do
        if p.Character then
            for _, part in pairs(p.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    local highlight = part:FindFirstChild("PlayerCham")
                    if highlight then highlight:Destroy() end
                end
            end
        end
    end
    
    if gameState.noclip and player.Character then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = true
            end
        end
    end
    
    screenGui:Destroy()
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == settings.toggleKey then
        screenGui.Enabled = not screenGui.Enabled
        if not screenGui.Enabled and gameState.chams then
            for _, p in pairs(Players:GetPlayers()) do
                if p.Character then
                    for _, part in pairs(p.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            local highlight = part:FindFirstChild("PlayerCham")
                            if highlight then highlight.Enabled = false end
                        end
                    end
                end
            end
        elseif screenGui.Enabled and gameState.chams then
            for _, p in pairs(Players:GetPlayers()) do
                if p.Character then
                    for _, part in pairs(p.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            local highlight = part:FindFirstChild("PlayerCham")
                            if highlight then highlight.Enabled = true end
                        end
                    end
                end
            end
        end
    end
end)

local function addHoverEffect(button, hoverColor, normalColor)
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = hoverColor}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = normalColor}):Play()
    end)
end

addHoverEffect(settingsBtn, colors.surfaceHover, colors.surface)
addHoverEffect(closeBtn, Color3.fromRGB(255, 100, 100), colors.danger)

gameState.connections.walkSpeed = RunService.Heartbeat:Connect(function()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = gameState.walkSpeed
    end
end)

Players.PlayerAdded:Connect(function(newPlayer)
    wait(1)
    if gameState.chams then
        updateChamsForAllPlayers()
    end
    updateFollowDropdown()
end)

local function setupPlayerCharacterMonitoring(targetPlayer)
    targetPlayer.CharacterAdded:Connect(function()
        wait(0.5)
        if gameState.chams then
            updateChamsForAllPlayers()
        end
        updateFollowDropdown()
    end)
end

for _, existingPlayer in pairs(Players:GetPlayers()) do
    if existingPlayer ~= player then
        setupPlayerCharacterMonitoring(existingPlayer)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    if newPlayer ~= player then
        setupPlayerCharacterMonitoring(newPlayer)
    end
end)

Players.PlayerRemoving:Connect(function(removedPlayer)
    updateFollowDropdown()
    
    if gameState.targetPlayer == removedPlayer then
        gameState.targetPlayer = nil
        followSelected.Text = "None selected"
        if gameState.followPlayer then
            setFollowToggle(false)
            gameState.followPlayer = false
            if gameState.connections.follow then
                gameState.connections.follow:Disconnect()
                gameState.connections.follow = nil
            end
        end
    end
end)

gameState.connections.dropdownMonitor = task.spawn(function()
    while screenGui.Parent do
        wait(5)
        if followDropdown and followDropdown.Parent then
            updateFollowDropdown()
        end
    end
end)

player.CharacterAdded:Connect(function()
    wait(1)
    
    if gameState.infJump then
        if gameState.connections.infJump then
            gameState.connections.infJump:Disconnect()
        end
        gameState.connections.infJump = UserInputService.JumpRequest:Connect(function()
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    end
    
    if gameState.noclip then
        if gameState.connections.noclip then
            gameState.connections.noclip:Disconnect()
        end
        gameState.connections.noclip = RunService.Stepped:Connect(function()
            if player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    end
    
    if gameState.chams then
        wait(0.5)
        updateChamsForAllPlayers()
    end
end)

local draggingWindow = false
local dragStart = nil
local startPos = nil

header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingWindow = true
        dragStart = input.Position
        startPos = mainWindow.Position
    end
end)

header.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and draggingWindow then
        local delta = input.Position - dragStart
        mainWindow.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingWindow = false
    end
end)

modalBackdrop.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        settingsModal.Visible = false
        modalBackdrop.Visible = false
    end
end)
