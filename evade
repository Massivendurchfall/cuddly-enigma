local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SpeicherManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local SpielerService = game:GetService("Players")
local LaufzeitService = game:GetService("RunService")
local Arbeitsbereich = game:GetService("Workspace")
local Replikat = game:GetService("ReplicatedStorage")
local EingabeService = game:GetService("UserInputService")
local VirtuelleEingabe = game:GetService("VirtualInputManager")
local Ich = SpielerService.LocalPlayer

local Fenster = Fluent:CreateWindow({
    Title = "Evade",
    SubTitle = "by jlcfg",
    TabWidth = 160,
    Size = UDim2.fromOffset(660, 540),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Reiter = {
    Spieler = Fenster:AddTab({ Title = "Spieler", Icon = "user" }),
    ESP = Fenster:AddTab({ Title = "ESP", Icon = "eye" }),
    Einstellungen = Fenster:AddTab({ Title = "Einstellungen", Icon = "sliders" })
}

local function erzeugeBillboard(text, farbe)
    local g = Instance.new("BillboardGui")
    g.Name = "EV_Tag"
    g.AlwaysOnTop = true
    g.Size = UDim2.new(0, 220, 0, 38)
    g.StudsOffset = Vector3.new(0, 3, 0)
    g.MaxDistance = 1e9
    local l = Instance.new("TextLabel")
    l.Name = "Label"
    l.BackgroundTransparency = 1
    l.Size = UDim2.new(1, 0, 1, 0)
    l.Font = Enum.Font.GothamBold
    l.Text = text
    l.TextSize = 14
    l.TextColor3 = farbe
    l.TextStrokeTransparency = 0
    l.TextStrokeColor3 = Color3.new(0,0,0)
    l.Parent = g
    return g
end

local function entferneBillboard(amModell)
    if not amModell then return end
    local hrp = amModell:FindFirstChild("HumanoidRootPart", true) or amModell:FindFirstChild("Head", true)
    if hrp and hrp:FindFirstChild("EV_Tag") then hrp.EV_Tag:Destroy() end
end

local spielerFarbe = Color3.fromRGB(0,255,0)
local spielerNamenAn = false

local function aktualisiereSpielerESP(p)
    if p == Ich then return end
    local c = p.Character
    if not c then return end
    local kopf = c:FindFirstChild("Head")
    if spielerNamenAn and kopf then
        if not kopf:FindFirstChild("EV_Tag") then
            erzeugeBillboard(p.Name, spielerFarbe).Parent = kopf
        else
            local l = kopf.EV_Tag:FindFirstChild("Label")
            if l then l.Text = p.Name l.TextColor3 = spielerFarbe end
        end
    else
        if kopf and kopf:FindFirstChild("EV_Tag") then kopf.EV_Tag:Destroy() end
    end
end

SpielerService.PlayerAdded:Connect(function(p)
    p.CharacterAdded:Connect(function()
        task.wait(0.2)
        aktualisiereSpielerESP(p)
    end)
end)

SpielerService.PlayerRemoving:Connect(function(p)
    if p.Character then entferneBillboard(p.Character) end
end)

for _,pl in ipairs(SielerService and SpielerService:GetPlayers() or {}) do
    if pl.Character then aktualisiereSpielerESP(pl) end
end

local abschnittESPSpieler = Reiter.ESP:AddSection("Spieler")
abschnittESPSpieler:AddToggle("SpielerNamen", { Title = "Namen anzeigen", Default = false, Callback = function(s)
    spielerNamenAn = s
    for _,pl in ipairs(SpielerService:GetPlayers()) do aktualisiereSpielerESP(pl) end
end})
abschnittESPSpieler:AddColorpicker("SpielerFarbe", { Title = "Namensfarbe", Default = spielerFarbe, Callback = function(c)
    spielerFarbe = c
    for _,pl in ipairs(SpielerService:GetPlayers()) do aktualisiereSpielerESP(pl) end
end})

local gegnerFarbe = Color3.fromRGB(255,0,0)
local gegnerNamenAn = false
local gegnerDistanzAn = false
local gegnerRegister = {}
local npcNamenSet = {}
local npcsOrdner = Replikat:FindFirstChild("NPCs")

local function schluessel(s) return tostring(s or ""):lower() end
local function auffrischenNPCSet()
    npcNamenSet = {}
    if npcsOrdner then
        for _,c in ipairs(npcsOrdner:GetChildren()) do
            npcNamenSet[schluessel(c.Name)] = true
        end
    end
end
local function istNPCName(n) return npcNamenSet[schluessel(n)] == true end
local function istEchterSpielerName(n) return SpielerService:FindFirstChild(n) ~= nil end

local function zielTeil(m)
    if not m or not m:IsA("Model") then return nil end
    if m:FindFirstChild("HumanoidRootPart", true) then return m:FindFirstChild("HumanoidRootPart", true) end
    if m.PrimaryPart and m.PrimaryPart:IsA("BasePart") then return m.PrimaryPart end
    if m:FindFirstChild("Head", true) then return m:FindFirstChild("Head", true) end
    return m:FindFirstChildWhichIsA("BasePart", true)
end

local function gegnerText(m)
    if not (gegnerNamenAn or gegnerDistanzAn) then return nil end
    local nameTeil = gegnerNamenAn and m.Name or ""
    local distTeil = ""
    local t = zielTeil(m)
    if gegnerDistanzAn and t and Ich.Character and Ich.Character:FindFirstChild("HumanoidRootPart") then
        local d = (Ich.Character.HumanoidRootPart.Position - t.Position).Magnitude
        distTeil = string.format("[%dm]", math.floor(d + 0.5))
    end
    if nameTeil ~= "" and distTeil ~= "" then return nameTeil.." "..distTeil end
    if nameTeil ~= "" then return nameTeil end
    if distTeil ~= "" then return distTeil end
    return nil
end

local function gegnerAus(m)
    entferneBillboard(m)
end

local function gegnerAn(m)
    if not m or not m.Parent then return end
    local t = zielTeil(m)
    if not t then return end
    local txt = gegnerText(m)
    if txt then
        if not t:FindFirstChild("EV_Tag") then
            erzeugeBillboard(txt, gegnerFarbe).Parent = t
        else
            local l = t.EV_Tag:FindFirstChild("Label")
            if l then l.Text = txt l.TextColor3 = gegnerFarbe end
        end
    else
        if t:FindFirstChild("EV_Tag") then t.EV_Tag:Destroy() end
    end
end

local function registriereGegner(m)
    if gegnerRegister[m] then return end
    gegnerRegister[m] = true
    gegnerAn(m)
end

local function entferneGegner(m)
    if not gegnerRegister[m] then return end
    gegnerRegister[m] = nil
    gegnerAus(m)
end

local function pruefeModell(m)
    if not m or not m:IsA("Model") then return end
    if istEchterSpielerName(m.Name) then return end
    if not m:FindFirstChildOfClass("Humanoid") then return end
    if istNPCName(m.Name) then registriereGegner(m) end
end

auffrischenNPCSet()
if npcsOrdner then
    npcsOrdner.ChildAdded:Connect(auffrischenNPCSet)
    npcsOrdner.ChildRemoved:Connect(auffrischenNPCSet)
end

for _,d in ipairs(Arbeitsbereich:GetDescendants()) do
    if d:IsA("Model") then pruefeModell(d) end
end

Arbeitsbereich.DescendantAdded:Connect(function(d)
    if d:IsA("Model") then pruefeModell(d) end
end)

Arbeitsbereich.DescendantRemoving:Connect(function(d)
    if d:IsA("Model") and gegnerRegister[d] then entferneGegner(d) end
end)

task.spawn(function()
    while true do
        for _,pl in ipairs(SpielerService:GetPlayers()) do aktualisiereSpielerESP(pl) end
        task.wait(1)
    end
end)

task.spawn(function()
    while true do
        for m,_ in pairs(gegnerRegister) do
            if m and m.Parent then gegnerAn(m) else entferneGegner(m) end
        end
        for _,d in ipairs(Arbeitsbereich:GetDescendants()) do
            if d:IsA("Model") then pruefeModell(d) end
        end
        task.wait(1)
    end
end)

local gehGeschwAn = false
local gehGeschw = 60
local aktuellerHumanoid = nil
local wsVerbindung = nil

local function istAmBoden(h, hrp)
    if h and h.FloorMaterial ~= Enum.Material.Air then return true end
    if not hrp then return false end
    local p = RaycastParams.new()
    p.FilterType = Enum.RaycastFilterType.Exclude
    p.FilterDescendantsInstances = {Ich.Character}
    local r = Arbeitsbereich:Raycast(hrp.Position, Vector3.new(0, -3, 0), p)
    return r ~= nil
end

local function starteGeschwindigkeit()
    if wsVerbindung then return end
    wsVerbindung = LaufzeitService.RenderStepped:Connect(function()
        if not aktuellerHumanoid or not aktuellerHumanoid.Parent then return end
        local char = aktuellerHumanoid.Parent
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local dir = aktuellerHumanoid.MoveDirection
        if gehGeschwAn and dir.Magnitude > 0.05 and istAmBoden(aktuellerHumanoid, hrp) then
            local u = dir.Unit
            local ziel = Vector3.new(u.X*gehGeschw, 0, u.Z*gehGeschw)
            local v = hrp.AssemblyLinearVelocity
            hrp.AssemblyLinearVelocity = Vector3.new(ziel.X, v.Y, ziel.Z)
        end
    end)
end

local function stoppeGeschwindigkeit()
    if wsVerbindung then wsVerbindung:Disconnect() wsVerbindung = nil end
end

local function beiHumanoid(h) aktuellerHumanoid = h end
local function beiCharakter(char)
    local h = char:WaitForChild("Humanoid", 10) or char:FindFirstChildOfClass("Humanoid")
    if h then beiHumanoid(h) end
    char.ChildAdded:Connect(function(ch) if ch:IsA("Humanoid") then beiHumanoid(ch) end end)
end
if Ich.Character then beiCharakter(Ich.Character) end
SpielerService.LocalPlayer.CharacterAdded:Connect(beiCharakter)

local bhopAktiv = false
local leerGedrueckt = false

EingabeService.InputBegan:Connect(function(eingabe, gp)
    if gp then return end
    if eingabe.KeyCode == Enum.KeyCode.Space then
        leerGedrueckt = true
    end
end)

EingabeService.InputEnded:Connect(function(eingabe, gp)
    if gp then return end
    if eingabe.KeyCode == Enum.KeyCode.Space then
        leerGedrueckt = false
    end
end)

LaufzeitService.RenderStepped:Connect(function()
    if not bhopAktiv then return end
    local char = Ich.Character
    if not char then return end
    local h = char:FindFirstChildOfClass("Humanoid")
    if not h then return end
    if leerGedrueckt and h.FloorMaterial ~= Enum.Material.Air then
        h.Jump = true
    end
end)

local abschnittSpieler = Reiter.Spieler:AddSection("Bewegung")
abschnittSpieler:AddToggle("GeschwindigkeitAn", { Title = "Laufgeschwindigkeit aktivieren", Default = false, Callback = function(s)
    gehGeschwAn = s
    if s then starteGeschwindigkeit() else stoppeGeschwindigkeit() end
end})
abschnittSpieler:AddSlider("GeschwindigkeitWert", { Title = "Geschwindigkeit", Min = 0, Max = 200, Default = 60, Rounding = 0, Callback = function(v)
    gehGeschw = v
end})
abschnittSpieler:AddButton({ Title = "Zurücksetzen", Callback = function()
    gehGeschw = 60
end})
abschnittSpieler:AddToggle("BHop", { Title = "Bunnyhop bei Leertaste", Default = false, Callback = function(s)
    bhopAktiv = s
end})

local abschnittESPNext = Reiter.ESP:AddSection("Nextbots")
abschnittESPNext:AddToggle("NextbotNamen", { Title = "Namen anzeigen", Default = false, Callback = function(s)
    gegnerNamenAn = s
end})
abschnittESPNext:AddToggle("NextbotDistanz", { Title = "Distanz anzeigen", Default = false, Callback = function(s)
    gegnerDistanzAn = s
end})
abschnittESPNext:AddColorpicker("NextbotFarbe", { Title = "Tag-Farbe", Default = gegnerFarbe, Callback = function(c)
    gegnerFarbe = c
end})

SpeicherManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SpeicherManager:IgnoreThemeSettings()
SpeicherManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("Evade_Suite")
SpeicherManager:SetFolder("Evade_Suite/config")
InterfaceManager:BuildInterfaceSection(Reiter.Einstellungen)
SpeicherManager:BuildConfigSection(Reiter.Einstellungen)
SpeicherManager:LoadAutoloadConfig()

Fluent:Notify({ Title = "Evade", Content = "Geladen", Duration = 5 })
Fenster:SelectTab(1)
