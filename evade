local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Me = Players.LocalPlayer

local Window = Fluent:CreateWindow({
    Title = "Evade",
    SubTitle = "by jlcfg",
    TabWidth = 160,
    Size = UDim2.fromOffset(660, 540),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "eye" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "sliders" })
}

local function createBillboard(text, color)
    local g = Instance.new("BillboardGui")
    g.Name = "EV_Tag"
    g.AlwaysOnTop = true
    g.Size = UDim2.new(0, 220, 0, 38)
    g.StudsOffset = Vector3.new(0, 3, 0)
    g.MaxDistance = 1e9
    local l = Instance.new("TextLabel")
    l.Name = "Label"
    l.BackgroundTransparency = 1
    l.Size = UDim2.new(1, 0, 1, 0)
    l.Font = Enum.Font.GothamBold
    l.Text = text
    l.TextSize = 14
    l.TextColor3 = color
    l.TextStrokeTransparency = 0
    l.TextStrokeColor3 = Color3.new(0,0,0)
    l.Parent = g
    return g
end

local function removeBillboard(onModel)
    if not onModel then return end
    local hrp = onModel:FindFirstChild("HumanoidRootPart", true) or onModel:FindFirstChild("Head", true)
    if hrp and hrp:FindFirstChild("EV_Tag") then hrp.EV_Tag:Destroy() end
end

local playerColor = Color3.fromRGB(0,255,0)
local showPlayerNames = false

local function updatePlayerESP(p)
    if p == Me then return end
    local c = p.Character
    if not c then return end
    local head = c:FindFirstChild("Head")
    if showPlayerNames and head then
        if not head:FindFirstChild("EV_Tag") then
            createBillboard(p.Name, playerColor).Parent = head
        else
            local l = head.EV_Tag:FindFirstChild("Label")
            if l then l.Text = p.Name l.TextColor3 = playerColor end
        end
    else
        if head and head:FindFirstChild("EV_Tag") then head.EV_Tag:Destroy() end
    end
end

Players.PlayerAdded:Connect(function(p)
    p.CharacterAdded:Connect(function()
        task.wait(0.2)
        updatePlayerESP(p)
    end)
end)

Players.PlayerRemoving:Connect(function(p)
    if p.Character then removeBillboard(p.Character) end
end)

for _,pl in ipairs(Players:GetPlayers()) do
    if pl.Character then updatePlayerESP(pl) end
end

local sectionESPPlayers = Tabs.ESP:AddSection("Players")
sectionESPPlayers:AddToggle("PlayerNames", { Title = "Show names", Default = false, Callback = function(s)
    showPlayerNames = s
    for _,pl in ipairs(Players:GetPlayers()) do updatePlayerESP(pl) end
end})
sectionESPPlayers:AddColorpicker("PlayerColor", { Title = "Name color", Default = playerColor, Callback = function(c)
    playerColor = c
    for _,pl in ipairs(Players:GetPlayers()) do updatePlayerESP(pl) end
end})

local enemyColor = Color3.fromRGB(255,0,0)
local showEnemyNames = false
local showEnemyDistance = false
local enemyRegistry = {}
local npcNameSet = {}
local npcsFolder = ReplicatedStorage:FindFirstChild("NPCs")

local function keyify(s) return tostring(s or ""):lower() end
local function refreshNPCSet()
    npcNameSet = {}
    if npcsFolder then
        for _,c in ipairs(npcsFolder:GetChildren()) do
            npcNameSet[keyify(c.Name)] = true
        end
    end
end
local function isNPCName(n) return npcNameSet[keyify(n)] == true end
local function isRealPlayerName(n) return Players:FindFirstChild(n) ~= nil end

local function targetPart(m)
    if not m or not m:IsA("Model") then return nil end
    if m:FindFirstChild("HumanoidRootPart", true) then return m:FindFirstChild("HumanoidRootPart", true) end
    if m.PrimaryPart and m.PrimaryPart:IsA("BasePart") then return m.PrimaryPart end
    if m:FindFirstChild("Head", true) then return m:FindFirstChild("Head", true) end
    return m:FindFirstChildWhichIsA("BasePart", true)
end

local function enemyText(m)
    if not (showEnemyNames or showEnemyDistance) then return nil end
    local namePart = showEnemyNames and m.Name or ""
    local distPart = ""
    local t = targetPart(m)
    if showEnemyDistance and t and Me.Character and Me.Character:FindFirstChild("HumanoidRootPart") then
        local d = (Me.Character.HumanoidRootPart.Position - t.Position).Magnitude
        distPart = string.format("[%dm]", math.floor(d + 0.5))
    end
    if namePart ~= "" and distPart ~= "" then return namePart.." "..distPart end
    if namePart ~= "" then return namePart end
    if distPart ~= "" then return distPart end
    return nil
end

local function enemyOff(m)
    removeBillboard(m)
end

local function enemyOn(m)
    if not m or not m.Parent then return end
    local t = targetPart(m)
    if not t then return end
    local txt = enemyText(m)
    if txt then
        if not t:FindFirstChild("EV_Tag") then
            createBillboard(txt, enemyColor).Parent = t
        else
            local l = t.EV_Tag:FindFirstChild("Label")
            if l then l.Text = txt l.TextColor3 = enemyColor end
        end
    else
        if t:FindFirstChild("EV_Tag") then t.EV_Tag:Destroy() end
    end
end

local function registerEnemy(m)
    if enemyRegistry[m] then return end
    enemyRegistry[m] = true
    enemyOn(m)
end

local function removeEnemy(m)
    if not enemyRegistry[m] then return end
    enemyRegistry[m] = nil
    enemyOff(m)
end

local function inspectModel(m)
    if not m or not m:IsA("Model") then return end
    if isRealPlayerName(m.Name) then return end
    if not m:FindFirstChildOfClass("Humanoid") then return end
    if isNPCName(m.Name) then registerEnemy(m) end
end

refreshNPCSet()
if npcsFolder then
    npcsFolder.ChildAdded:Connect(refreshNPCSet)
    npcsFolder.ChildRemoved:Connect(refreshNPCSet)
end

for _,d in ipairs(Workspace:GetDescendants()) do
    if d:IsA("Model") then inspectModel(d) end
end

Workspace.DescendantAdded:Connect(function(d)
    if d:IsA("Model") then inspectModel(d) end
end)

Workspace.DescendantRemoving:Connect(function(d)
    if d:IsA("Model") and enemyRegistry[d] then removeEnemy(d) end
end)

task.spawn(function()
    while true do
        for _,pl in ipairs(Players:GetPlayers()) do updatePlayerESP(pl) end
        task.wait(1)
    end
end)

task.spawn(function()
    while true do
        for m,_ in pairs(enemyRegistry) do
            if m and m.Parent then enemyOn(m) else removeEnemy(m) end
        end
        for _,d in ipairs(Workspace:GetDescendants()) do
            if d:IsA("Model") then inspectModel(d) end
        end
        task.wait(1)
    end
end)

local walkspeedEnabled = false
local walkspeed = 60
local currentHumanoid = nil
local wsConnection = nil

local function isOnGround(h, hrp)
    if h and h.FloorMaterial ~= Enum.Material.Air then return true end
    if not hrp then return false end
    local p = RaycastParams.new()
    p.FilterType = Enum.RaycastFilterType.Exclude
    p.FilterDescendantsInstances = {Me.Character}
    local r = Workspace:Raycast(hrp.Position, Vector3.new(0, -3, 0), p)
    return r ~= nil
end

local function startWalkspeed()
    if wsConnection then return end
    wsConnection = RunService.RenderStepped:Connect(function()
        if not currentHumanoid or not currentHumanoid.Parent then return end
        local char = currentHumanoid.Parent
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local dir = currentHumanoid.MoveDirection
        if walkspeedEnabled and dir.Magnitude > 0.05 and isOnGround(currentHumanoid, hrp) then
            local u = dir.Unit
            local target = Vector3.new(u.X*walkspeed, 0, u.Z*walkspeed)
            local v = hrp.AssemblyLinearVelocity
            hrp.AssemblyLinearVelocity = Vector3.new(target.X, v.Y, target.Z)
        end
    end)
end

local function stopWalkspeed()
    if wsConnection then wsConnection:Disconnect() wsConnection = nil end
end

local function onHumanoid(h) currentHumanoid = h end
local function onCharacter(char)
    local h = char:WaitForChild("Humanoid", 10) or char:FindFirstChildOfClass("Humanoid")
    if h then onHumanoid(h) end
    char.ChildAdded:Connect(function(ch) if ch:IsA("Humanoid") then onHumanoid(ch) end end)
end
if Me.Character then onCharacter(Me.Character) end
Players.LocalPlayer.CharacterAdded:Connect(onCharacter)

local bhopEnabled = false
local spaceHeld = false

UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.Space then
        spaceHeld = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.Space then
        spaceHeld = false
    end
end)

RunService.RenderStepped:Connect(function()
    if not bhopEnabled then return end
    local char = Me.Character
    if not char then return end
    local h = char:FindFirstChildOfClass("Humanoid")
    if not h then return end
    if spaceHeld and h.FloorMaterial ~= Enum.Material.Air then
        h.Jump = true
    end
end)

local sectionPlayer = Tabs.Player:AddSection("Movement")
sectionPlayer:AddToggle("WalkspeedEnabled", { Title = "Enable walkspeed", Default = false, Callback = function(s)
    walkspeedEnabled = s
    if s then startWalkspeed() else stopWalkspeed() end
end})
sectionPlayer:AddSlider("WalkspeedValue", { Title = "Speed", Min = 0, Max = 200, Default = 60, Rounding = 0, Callback = function(v)
    walkspeed = v
end})
sectionPlayer:AddButton({ Title = "Reset", Callback = function()
    walkspeed = 60
end})
sectionPlayer:AddToggle("BHop", { Title = "Bunnyhop on Space", Default = false, Callback = function(s)
    bhopEnabled = s
end})

local sectionESPNext = Tabs.ESP:AddSection("Nextbots")
sectionESPNext:AddToggle("NextbotNames", { Title = "Show names", Default = false, Callback = function(s)
    showEnemyNames = s
end})
sectionESPNext:AddToggle("NextbotDistance", { Title = "Show distance", Default = false, Callback = function(s)
    showEnemyDistance = s
end})
sectionESPNext:AddColorpicker("NextbotColor", { Title = "Tag color", Default = enemyColor, Callback = function(c)
    enemyColor = c
end})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("Evade_Suite")
SaveManager:SetFolder("Evade_Suite/config")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
SaveManager:LoadAutoloadConfig()

Fluent:Notify({ Title = "Evade", Content = "Loaded", Duration = 5 })
Window:SelectTab(1)
